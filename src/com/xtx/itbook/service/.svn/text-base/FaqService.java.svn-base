package com.xtx.itbook.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import net.tsz.afinal.http.AjaxCallBack;

import org.apache.http.ParseException;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;

import com.alibaba.fastjson.JSON;
import com.xtx.itbook.dao.FaqDao;
import com.xtx.itbook.entity.Faq;
import com.xtx.itbook.entity.FaqResponse;
import com.xtx.itbook.net.NetUtil;
import com.xtx.itbook.ui.R;
import com.xtx.itbook.ui.faq.FaqActivity;
import com.xtx.itbook.ui.terminology.TerminologyActivity;
import com.xtx.itbook.util.Const;
import com.xtx.itbook.util.LogUtil;
import com.xtx.itbook.util.StringUtil;

/**
 * FaqService接口实现类
 * @author caocong
 *
 */
public class FaqService extends InitService
{
    private static final String TAG = "FaqService";

    private Context context;

    private FaqDao dao;

    private List<Faq> faqs;

    private final int PAGE_SIZE = 20;// 每次请求多少条

    private Handler mHandler;

    public FaqService(Context context, Handler mHandler)
    {
        super(context);
        this.context = context;
        this.dao = new FaqDao(context);
        this.faqs = new ArrayList<Faq>();
        this.mHandler = mHandler;
    }

    /**
     * 获取数据
     * @return
     */
    public List<Faq> getFaqs()
    {
        return faqs;
    }

    /**
     * 获取faq集合
     * @param upid        目录的id
     * @param currentPage 请求第几页  
     * @param pageSize    一页多少条
     * @param language    语言
     * @return
     * @throws JSONException 
     * @throws IOException 
     * @throws ParseException 
     */
    public void startService(String sessionId, long upid, int currentPage,
            int pageSize, String language) throws JSONException, ParseException, IOException
    {
        faqs = dao.findByPageAndSize(upid, currentPage, pageSize);
        if (faqs == null || faqs.isEmpty())
        {
            // 第一次访问
            if (currentPage == 1)
            {
                getFaqsFromNet(sessionId, upid, language, 0L, currentPage,
                        pageSize, true);
            }
            else
            {
                getFaqsFromNet(sessionId, upid, language,
                        dao.getLastUpdateTime(), currentPage, pageSize, true);
            }

        }
        else
        {
            Message msg = Message.obtain(mHandler,
                    TerminologyActivity.MSG_UPDATE_LISTVIEW);
            msg.sendToTarget();
             getFaqsFromNet(sessionId, upid, language,
                        dao.getLastUpdateTime(), currentPage, pageSize, false);

        }
    }

    /**
     * 从服务器获取数据，解析，存入本地数据库
     * @param upid
     * @param language
     * @param time
     * @param currentPage
     * @param pageSize
     * @param isFirst    是否第一次访问
     * @throws JSONException
     * @throws IOException 
     * @throws ParseException 
     */
    public void getFaqsFromNet(String sessionId, long upid, String language,
            long time, int currentPage, int pageSize, boolean isFirst)
            throws JSONException, ParseException, IOException
    {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("sessionId", sessionId);
        jsonObject.put("pid", upid);
        jsonObject.put("language", language);
        jsonObject.put("time", time);
        jsonObject.put("curPage", currentPage);
        jsonObject.put("pageSize", pageSize);

        String str = NetUtil.connServerForResult(
                StringUtil.getUrl(R.string.faq_url), jsonObject);
        if (str != null || !"".equals(str.trim()))
        {
            handlerData(isFirst, str);
        }

    }

    /**
     * 处理数据
     * @param isFirst
     * @param str
     */

    private void handlerData(boolean isFirst, String str)
    {

        FaqResponse response = JSON.parseObject(str, FaqResponse.class);
        if (response == null)
        {
            return;
        }
        if (isFirst)
        {
            List<Faq> data = null;
            // 第一次
            if (response.getState() == 1)
            {
                dao.deleteAll();
                data = parseAndSaveData(response.getList());
                if (data != null && data.size() > 0)
                {
                    faqs.addAll(data);
                }

            }
            else if (response.getState() == 3)
            {

                data = parseAndSaveData(response.getList());
                if (data != null && data.size() > 0)
                {
                    faqs.addAll(data);
                }

            }
        }
        else
        {
            LogUtil.i(TAG, response.getState());
            // 不是第一次
            // 服务器数据发生了变化
            switch (response.getState())
            {
                case 0:
                    // 直接从数据库中获取
                    faqs = dao.findAll();
                case 2:
                    dao.deleteAll();
                    faqs.addAll(parseAndSaveData(response.getList()));
                    break;

                case 3:
                    faqs.addAll(parseAndSaveData(response.getList()));
                    break;
            }
        }
    }

    /**
     * 解析并存入数据
     * @param jsonStr
     */
    private List<Faq> parseAndSaveData(String jsonStr)
    {
        if (TextUtils.isEmpty(jsonStr))
        {
            return null;
        }
        List<Faq> faqs = JSON.parseArray(jsonStr, Faq.class);
        dao.saveAll(faqs);
        return faqs;
    }

}
